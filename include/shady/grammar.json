{
  "address-spaces": [
    {
      "name": "Generic",
      "llvm-id": 0,
      "physical": true
    },
    {
      "name": "GlobalPhysical",
      "description": "Global memory, all threads see the same data (not necessarily consistent!)",
      "llvm-id": 1,
      "physical": true
    },
    {
      "name": "SharedPhysical",
      "description": "Points into workgroup-private memory (aka shared memory)",
      "llvm-id": 3,
      "physical": true
    },
    {
      "name": "SubgroupPhysical",
      "description": [
        "Points into subgroup-private memory",
        "All threads in a subgroup see the same contents for the same address, but threads in different subgroups see different data.",
        "Needs to be lowered to something else since targets do not understand this" ],
      "llvm-id": 9,
      "physical": true
    },
    {
      "name": "PrivatePhysical",
      "description": [
        "Points into thread-private memory (all threads see different contents for the same address)"
      ],
      "llvm-id": 5,
      "physical": true
    },
    {
      "name": "GlobalLogical",
      "llvm-id": 388
    },
    {
      "name": "SharedLogical",
      "llvm-id": 387
    },
    {
      "name": "SubgroupLogical",
      "llvm-id": 386
    },
    {
      "name": "PrivateLogical",
      "llvm-id": 385
    },
    {
      "name": "Input",
      "description": "special addressing spaces for input/output global variables in shader stages",
      "llvm-id": 389
    },
    {
      "name": "UInput",
      "description": "just like the Input address space, but known to be subgroup-uniform",
      "llvm-id": 396
    },
    {
      "name": "Output",
      "llvm-id": 390
    },
    {
      "name": "External",
      "description": [ "For resources supplied by the host, agnostic of the binding model.", "Not supported on all backends!" ],
      "llvm-id": 391
    },
    {
      "name": "PushConstant",
      "llvm-id": 392
    },
    {
      "name": "FunctionLogical",
      "description": "Weird SPIR-V nonsense: this is like PrivateLogical, but with non-static lifetimes (ie function lifetime)",
      "llvm-id": 393
    },
    {
      "name": "ShaderStorageBufferObject",
      "llvm-id": 394
    },
    {
      "name": "Uniform",
      "llvm-id": 395
    },
    {
      "name": "UniformConstant",
      "llvm-id": 398
    },
    {
      "name": "Image",
      "llvm-id": 397
    },
    {
      "name": "DebugInfo"
    }
  ],
  "node-classes": [
    {
      "name": "type"
    },
    {
      "name": "value"
    },
    {
      "name": "variable",
      "generate-enum": false
    },
    {
      "name": "instruction"
    },
    {
      "name": "terminator"
    },
    {
      "name": "declaration",
      "ops": [
        { "name": "annotations", "class": "annotation", "list": true },
        { "name": "name", "class": "string" }
      ]
    },
    {
      "name": "case"
    },
    {
      "name": "basic_block"
    },
    {
      "name": "annotation",
      "ops": [
        { "name": "name", "class": "string" }
      ]
    },
    {
      "name": "jump",
      "generate-enum": false
    },
    {
      "name": "structured_construct",
      "ops": [
        { "name": "tail", "class": "case" }
      ]
    }
  ],
  "nodes": [
    {
      "name": "MaskType",
      "class": "type",
      "type": false
    },
    {
      "name": "JoinPointType",
      "class": "type",
      "ops": [
        { "name": "yield_types", "class": "type", "list": true }
      ]
    },
    {
      "name": "NoRet",
      "snake_name": "noret_type",
      "class": "type",
      "type": false
    },
    {
      "name": "Int",
      "snake_name": "int_type",
      "class": "type",
      "type": false,
      "ops": [
        { "name": "width", "type": "IntSizes" },
        { "name": "is_signed", "type": "bool" }
      ]
    },
    {
      "name": "Float",
      "snake_name": "float_type",
      "class": "type",
      "type": false,
      "ops": [
        { "name": "width", "type": "FloatSizes" }
      ]
    },
    {
      "name": "Bool",
      "snake_name": "bool_type",
      "class": "type",
      "type": false
    },
    {
      "name": "RecordType",
      "snake_name": "record_type",
      "class": "type",
      "ops": [
        { "name": "members", "class": "type", "list": true },
        { "name": "names", "class": "string", "list": true },
        { "name": "special", "type": "RecordSpecialFlag" }
      ]
    },
    {
      "name": "FnType",
      "snake_name": "fn_type",
      "class": "type",
      "type": false,
      "ops": [
        { "name": "param_types", "class": "type", "list": true },
        { "name": "return_types", "class": "type", "list": true }
      ]
    },
    {
      "name": "BBType",
      "snake_name": "bb_type",
      "class": "type",
      "type": false,
      "ops": [
        { "name": "param_types", "class": "type", "list": true }
      ]
    },
    {
      "name": "LamType",
      "class": "type",
      "type": false,
      "ops": [
        { "name": "param_types", "class": "type", "list": true }
      ]
    },
    {
      "name": "PtrType",
      "class": "type",
      "ops": [
        { "name": "address_space", "type": "AddressSpace" },
        { "name": "pointed_type", "class": "type" }
      ]
    },
    {
      "name": "QualifiedType",
      "class": "type",
      "ops": [
        { "name": "is_uniform", "type": "bool" },
        { "name": "type", "class": "type" }
      ]
    },
    {
      "name": "ArrType",
      "class": "type",
      "ops": [
        { "name": "element_type", "class": "type" },
        { "name": "size", "class": "value" }
      ]
    },
    {
      "name": "PackType",
      "class": "type",
      "ops": [
        { "name": "element_type", "class": "type" },
        { "name": "width", "type": "uint32_t" }
      ]
    },
    {
      "name": "TypeDeclRef",
      "class": "type",
      "type": false,
      "ops": [
        { "name": "decl", "class": "declaration" }
      ]
    },
    {
      "name": "Variable",
      "snake_name": "var",
      "class": ["value", "variable"],
      "constructor": "custom",
      "ops": [
        { "name": "type", "class": "type" },
        { "name": "name", "class": "string" },
        { "name": "abs", "type": "const Node*", "ignore": true },
        { "name": "pindex", "type": "unsigned", "ignore": true }
      ]
    },
    {
      "name": "ConstrainedValue",
      "snake_name": "constrained",
      "class": "value",
      "type": false,
      "ops": [
        { "name": "type", "class": "type" },
        { "name": "value", "class": "value" }
      ]
    },
    {
      "name": "UntypedNumber",
      "class": "value",
      "ops": [
        { "name": "plaintext", "type": "String" }
      ]
    },
    {
      "name": "IntLiteral",
      "class": "value",
      "ops": [
        { "name": "width", "type": "IntSizes" },
        { "name": "is_signed", "type": "bool" },
        { "name": "value", "type": "uint64_t" }
      ]
    },
    {
      "name": "FloatLiteral",
      "class": "value",
      "description": "C lacks sized float types, so let's just store the raw bits for them",
      "ops": [
        { "name": "width", "type": "FloatSizes" },
        { "name": "value", "type": "uint64_t" }
      ]
    },
    {
      "name": "StringLiteral",
      "snake_name": "string_lit",
      "class": "value",
      "ops": [
        { "name": "string", "class": "string" }
      ]
    },
    {
      "name": "True",
      "snake_name": "true_lit",
      "class": "value"
    },
    {
      "name": "False",
      "snake_name": "false_lit",
      "class": "value"
    },
    {
      "name": "NullPtr",
      "class": "value",
      "ops": [
        { "name": "ptr_type", "class": "type" }
      ]
    },
    {
      "name": "Composite",
      "class": "value",
      "description": [
        "A value made out of more values.",
        "Re-ordering values does not count as a computation here !"
      ],
      "ops": [
        { "name": "type", "class": "type" },
        { "name": "contents", "class": "value", "list": true }
      ]
    },
    {
      "name": "Fill",
      "class": "value",
      "ops": [
        { "name": "type", "class": "type" },
        { "name": "value", "class": "value" }
      ]
    },
    {
      "name": "Undef",
      "class": "value",
      "ops": [
        { "name": "type", "class": "type" }
      ]
    },
    {
      "name": "RefDecl",
      "class": "value",
      "description": [
        "References either a global (yielding a pointer to it), or a constant (yielding a value of the type itself)",
        "Declarations are not values themselves, this node is required to \"convert\" them."
      ],
      "ops": [
        { "name": "decl", "class": "declaration" }
      ]
    },
    {
      "name": "FnAddr",
      "class": "value",
      "description": "Like RefDecl but for functions, it yields a _function pointer_ !",
      "ops": [
        { "name": "fn", "class": "declaration" }
      ]
    },
    {
      "name": "Call",
      "class": ["instruction", "value"],
      "ops": [
        { "name": "callee", "class": "value" },
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "PrimOp",
      "class":["instruction", "value"],
      "ops": [
        { "name": "op", "type": "Op" },
        { "name": "type_arguments", "class": "type", "list": true },
        { "name": "operands", "class": "value", "list": true }
      ]
    },
    {
      "name": "InsertHelper",
      "class": ["instruction", "value"],
      "description": [
        "Used as a helper to insert multiple instructions, or even control-flow, where an instruction is expected",
        "Body must be a chain of Body and structured_construct nodes, eventually ending in Yield."
      ],
      "ops": [
        { "name": "body", "class": "terminator" }
      ]
    },
    {
      "name": "Comment",
      "class": "instruction",
      "ops": [
        { "name": "string", "class": "string" }
      ]
    },
    {
      "name": "TailCall",
      "class": "terminator",
      "ops": [
        { "name": "target", "class": "value" },
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "Jump",
      "class": ["terminator", "jump"],
      "ops": [
        { "name": "target", "class": "basic_block" },
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "Branch",
      "class": "terminator",
      "description": [
        "Branches can cause divergence, but they can never cause re-convergence.",
        "Branch alternatives are made out of Jump terminators"
      ],
      "ops": [
        { "name": "branch_condition", "class": "value" },
        { "name": "true_destination", "class": "jump" },
        { "name": "false_destination", "class": "jump" }
      ]
    },
    {
      "name": "Switch",
      "snake_name": "br_switch",
      "class": "terminator",
      "description": "N-way variant of Branch. See Branch.",
      "ops": [
        { "name": "inspect", "class": "value" },
        { "name": "literals", "class": "value", "list": true },
        { "name": "destinations", "class": "jump", "list": true },
        { "name": "default_destination", "class": "jump" }
      ]
    },
    {
      "name": "If",
      "snake_name": "structured_if",
      "class": ["terminator", "structured_construct"],
      "ops": [
        { "name": "yield_types", "class": "type", "list": true },
        { "name": "condition", "class": "value" },
        { "name": "if_true", "class": "case" },
        { "name": "if_false", "class": "case" },
        { "name": "tail", "class": "case" }
      ]
    },
    {
      "name": "Match",
      "snake_name": "structured_match",
      "class": ["terminator", "structured_construct"],
      "ops": [
        { "name": "yield_types", "class": "type", "list": true },
        { "name": "inspect", "class": "value" },
        { "name": "literals", "class": "value", "list": true },
        { "name": "cases", "class": "case", "list": true },
        { "name": "default_case", "class": "case" },
        { "name": "tail", "class": "case" }
      ]
    },
    {
      "name": "Loop",
      "snake_name": "structured_loop",
      "class": ["terminator", "structured_construct"],
      "ops": [
        { "name": "yield_types", "class": "type", "list": true },
        { "name": "body", "class": "case" },
        { "name": "initial_args", "class": "value", "list": true },
        { "name": "tail", "class": "case" }
      ]
    },
    {
      "name": "Control",
      "class": ["terminator", "structured_construct"],
      "ops": [
        { "name": "yield_types", "class": "type", "list": true },
        { "name": "inside", "class": "case" },
        { "name": "tail", "class": "case" }
      ]
    },
    {
      "name": "Join",
      "class": "terminator",
      "description": [
        "Join nodes are used to undo the divergence caused by branches",
        "At join nodes, an explicit mask is used to force a number of divergent execution paths to resume.",
        "If @p is_indirect is set, the target must be a function pointer. Otherwise, the target must be a function directly."
      ],
      "ops": [
        { "name": "join_point", "class": "value" },
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "MergeContinue",
      "class": "terminator",
      "ops": [
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "MergeBreak",
      "class": "terminator",
      "ops": [
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "Yield",
      "class": "terminator",
      "ops": [
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "InsertHelperEnd",
      "class": "terminator",
      "type": false,
      "ops": [
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "Return",
      "snake_name": "fn_ret",
      "class": "terminator",
      "ops": [
        { "name": "fn", "class": "declaration" },
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "Unreachable",
      "class": "terminator"
    },
    {
      "name": "Function",
      "snake_name": "fun",
      "class": "declaration",
      "constructor": "custom",
      "ops": [
        { "name": "module", "type": "Module*", "ignore": true },
        { "name": "name", "class": "string" },
        { "name": "annotations", "class": "annotation", "list": true },
        { "name": "params", "class": "variable", "list": true },
        { "name": "body", "class": "terminator" },
        { "name": "return_types", "class": "type", "list": true }
      ]
    },
    {
      "name": "Constant",
      "class": "declaration",
      "constructor": "custom",
      "description": "Constants are used to express possibly complicated compile-time expressions",
      "ops": [
        { "name": "module", "type": "Module*", "ignore": true },
        { "name": "name", "class": "string" },
        { "name": "annotations", "class": "annotation", "list": true },
        { "name": "type_hint", "class": "type" },
        { "name": "instruction", "class": "instruction" }
      ]
    },
    {
      "name": "GlobalVariable",
      "class": "declaration",
      "constructor": "custom",
      "ops": [
        { "name": "module", "type": "Module*", "ignore": true },
        { "name": "name", "class": "string" },
        { "name": "annotations", "class": "annotation", "list": true },
        { "name": "type", "class": "type" },
        { "name": "address_space", "type": "AddressSpace"},
        { "name": "init", "class": "value", "ignore": true }
      ]
    },
    {
      "name": "NominalType",
      "snake_name": "nom_type",
      "class": "declaration",
      "constructor": "custom",
      "type": false,
      "ops": [
        { "name": "module", "type": "Module*", "ignore": true },
        { "name": "name", "class": "string" },
        { "name": "annotations", "class": "annotation", "list": true },
        { "name": "body", "class": "type" }
      ]
    },
    {
      "name": "Annotation",
      "class": "annotation",
      "type": false,
      "ops": [
        { "name": "name", "class": "string" }
      ]
    },
    {
      "name": "AnnotationValue",
      "class": "annotation",
      "type": false,
      "ops": [
        { "name": "name", "class": "string" },
        { "name": "value", "class": "value" }
      ]
    },
    {
      "name": "AnnotationValues",
      "class": "annotation",
      "type": false,
      "ops": [
        { "name": "name", "class": "string" },
        { "name": "values", "class": "value", "list": true }
      ]
    },
    {
      "name": "AnnotationCompound",
      "class": "annotation",
      "type": false,
      "ops": [
        { "name": "name", "class": "string" },
        { "name": "entries", "class": "annotation", "list": true }
      ]
    },
    {
      "name": "BasicBlock",
      "constructor": "custom",
      "description": "A named abstraction that lives inside a function and can be jumped to",
      "class": "basic_block",
      "ops": [
        { "name": "params", "class": "variable", "list": true },
        { "name": "body", "class": "terminator" },
        { "name": "fn", "class": "declaration" },
        { "name": "name", "class": "string" }
      ]
    },
    {
      "name": "Case",
      "snake_name": "case_",
      "constructor": "custom",
      "class": "case",
      "description": [
        "An unnamed abstraction that lives inside a function, and can be used as part of various control-flow constructs",
        "Most notably, the tails of standard `let` nodes"
      ],
      "ops": [
        { "name": "params", "class": "variable", "list": true },
        { "name": "body", "class": "terminator" },
        { "name": "structured_construct", "type": "const Node*", "ignored": true }
      ]
    },
    {
      "name": "Body",
      "description": "Provides a list of instructions and a terminator",
      "type": false,
      "class": "terminator",
      "ops": [
        { "name": "instructions", "class": "instruction", "list": true },
        { "name": "terminator", "class": "terminator" }
      ]
    },
    {
      "name": "LetMut",
      "constructor": "custom",
      "front-end-only": true,
      "ops": [
        { "name": "instruction", "class": "instruction" },
        { "name": "variables", "class": "variable", "list": true }
      ]
    },
    {
      "name": "Unbound",
      "description": "Unbound identifier, obtained by parsing a file",
      "type": false,
      "front-end-only": true,
      "ops": [
        { "name": "name", "type": "String" }
      ]
    },
    {
      "name": "UnboundBBs",
      "description": "A node together with unbound basic blocks it dominates, obtained by parsing a file",
      "type": false,
      "front-end-only": true,
      "ops": [
        { "name": "body", "class": "terminator" },
        { "name": "children_blocks", "class": "basic_block", "list": true }
      ]
    }
  ]
}