{
  "address-spaces": [
    {
      "name": "Generic",
      "llvm-id": 0
    },
    {
      "name": "Global",
      "description": "Global memory, all threads see the same data (not necessarily consistent!)",
      "llvm-id": 1
    },
    {
      "name": "Shared",
      "description": "Points into workgroup-private memory (aka shared memory)",
      "llvm-id": 3
    },
    {
      "name": "Subgroup",
      "description": [
        "Points into subgroup-private memory",
        "All threads in a subgroup see the same contents for the same address, but threads in different subgroups see different data.",
        "Needs to be lowered to something else since targets do not understand this" ],
      "llvm-id": 9
    },
    {
      "name": "Private",
      "description": [
        "Points into thread-private memory (all threads see different contents for the same address)"
      ],
      "llvm-id": 5
    },
    {
      "name": "Input",
      "description": "special addressing spaces for input/output global variables in shader stages",
      "llvm-id": 389
    },
    {
      "name": "UInput",
      "description": "just like the Input address space, but known to be subgroup-uniform",
      "llvm-id": 396
    },
    {
      "name": "Output",
      "llvm-id": 390
    },
    {
      "name": "External",
      "description": [ "For resources supplied by the host, agnostic of the binding model.", "Not supported on all backends!" ],
      "llvm-id": 391
    },
    {
      "name": "PushConstant",
      "llvm-id": 392
    },
    {
      "name": "Function",
      "description": "Weird SPIR-V nonsense: this is like Private, but with non-static lifetimes (ie function lifetime)",
      "llvm-id": 393
    },
    {
      "name": "ShaderStorageBufferObject",
      "llvm-id": 394
    },
    {
      "name": "Uniform",
      "llvm-id": 395
    },
    {
      "name": "UniformConstant",
      "llvm-id": 398
    },
    {
      "name": "Image",
      "llvm-id": 397
    },
    {
      "name": "CallableDataKHR"
    },
    {
      "name": "IncomingCallableDataKHR"
    },
    {
      "name": "DebugInfo"
    },
    {
      "name": "Code"
    }
  ],
  "node-classes": [
    {
      "name": "type"
    },
    {
      "name": "value"
    },
    {
      "name": "param",
      "generate-enum": false
    },
    {
      "name": "abstraction",
      "ops": [
        { "name": "params", "class": "param", "list": true },
        { "name": "body", "class": "terminator", "nullable": true }
      ]
    },
    {
      "name": "instruction"
    },
    {
      "name": "terminator",
      "ops": [
        { "name": "mem", "class": "mem" }
      ]
    },
    {
      "name": "basic_block"
    },
    {
      "name": "function"
    },
    {
      "name": "annotation",
      "ops": [
        { "name": "name", "class": "string" }
      ]
    },
    {
      "name": "jump",
      "generate-enum": false
    },
    {
      "name": "structured_construct",
      "ops": [
        { "name": "tail", "class": "basic_block" }
      ]
    },
    {
      "name": "mem"
    }
  ],
  "nodes": [
    {
      "name": "JoinPointType",
      "class": "type",
      "ops": [
        { "name": "yield_types", "class": "type", "list": true }
      ]
    },
    {
      "name": "NoRet",
      "snake_name": "noret_type",
      "description": [
        "Empty type: there are no values of this type.",
        "Useful for the codomain of things that don't return at all"
      ],
      "class": "type",
      "type": false
    },
    {
      "name": "Int",
      "snake_name": "int_type",
      "class": "type",
      "type": false,
      "ops": [
        { "name": "width", "type": "ShdIntSize" },
        { "name": "is_signed", "type": "bool" }
      ]
    },
    {
      "name": "Float",
      "snake_name": "float_type",
      "class": "type",
      "type": false,
      "ops": [
        { "name": "width", "type": "ShdFloatFormat" }
      ]
    },
    {
      "name": "Bool",
      "snake_name": "bool_type",
      "class": "type",
      "type": false
    },
    {
      "name": "RecordType",
      "snake_name": "record_type",
      "class": "type",
      "ops": [
        { "name": "members", "class": "type", "list": true },
        { "name": "names", "class": "string", "list": true },
        { "name": "special", "type": "ShdRecordFlags" }
      ]
    },
    {
      "name": "FnType",
      "snake_name": "fn_type",
      "class": "type",
      "type": false,
      "ops": [
        { "name": "param_types", "class": "type", "list": true },
        { "name": "return_types", "class": "type", "list": true }
      ]
    },
    {
      "name": "BBType",
      "snake_name": "bb_type",
      "class": "type",
      "type": false,
      "ops": [
        { "name": "param_types", "class": "type", "list": true }
      ]
    },
    {
      "name": "LamType",
      "class": "type",
      "type": false,
      "ops": [
        { "name": "param_types", "class": "type", "list": true }
      ]
    },
    {
      "name": "PtrType",
      "class": "type",
      "ops": [
        { "name": "address_space", "type": "AddressSpace" },
        { "name": "pointed_type", "class": "type" },
        { "name": "is_reference", "type": "bool" }
      ]
    },
    {
      "name": "QualifiedType",
      "class": "type",
      "ops": [
        { "name": "scope", "type": "ShdScope" },
        { "name": "type", "class": "type" }
      ]
    },
    {
      "name": "ArrType",
      "class": "type",
      "ops": [
        { "name": "element_type", "class": "type" },
        { "name": "size", "class": "value", "nullable": true }
      ]
    },
    {
      "name": "VectorType",
      "class": "type",
      "ops": [
        { "name": "element_type", "class": "type" },
        { "name": "width", "type": "uint32_t" }
      ]
    },
    {
      "name": "MatrixType",
      "class": "type",
      "ops": [
        { "name": "element_type", "class": "type" },
        { "name": "columns", "type": "uint32_t" }
      ]
    },
    {
      "name": "Param",
      "class": ["value", "param"],
      "nominal": true,
      "ops": [
        { "name": "type", "class": "type" },
        { "name": "abs", "type": "const Node*", "ignore": true },
        { "name": "pindex", "type": "unsigned", "ignore": true }
      ]
    },
    {
      "name": "UntypedNumber",
      "class": "value",
      "nominal": true,
      "ops": [
        { "name": "plaintext", "class": "string" }
      ]
    },
    {
      "name": "IntLiteral",
      "class": "value",
      "ops": [
        { "name": "width", "type": "ShdIntSize" },
        { "name": "is_signed", "type": "bool" },
        { "name": "value", "type": "uint64_t" }
      ]
    },
    {
      "name": "FloatLiteral",
      "class": "value",
      "description": "C lacks sized float types, so let's just store the raw bits for them",
      "ops": [
        { "name": "width", "type": "ShdFloatFormat" },
        { "name": "value", "type": "uint64_t" }
      ]
    },
    {
      "name": "StringLiteral",
      "snake_name": "string_lit",
      "class": "value",
      "ops": [
        { "name": "string", "class": "string" }
      ]
    },
    {
      "name": "True",
      "snake_name": "true_lit",
      "class": "value"
    },
    {
      "name": "False",
      "snake_name": "false_lit",
      "class": "value"
    },
    {
      "name": "NullPtr",
      "class": "value",
      "ops": [
        { "name": "ptr_type", "class": "type" }
      ]
    },
    {
      "name": "Composite",
      "class": "value",
      "description": [
        "A value made out of more values.",
        "Re-ordering values does not count as a computation here !"
      ],
      "ops": [
        { "name": "type", "class": "type", "nullable": true },
        { "name": "contents", "class": "value", "list": true }
      ]
    },
    {
      "name": "Extract",
      "class": ["value", "instruction"],
      "description": [
        "Extract a field out of a composite"
      ],
      "ops": [
        { "name": "composite", "class": "value" },
        { "name": "selector", "class": "value" }
      ]
    },
    {
      "name": "Insert",
      "class": ["value", "instruction"],
      "description": [
        "Change a field of a composite"
      ],
      "ops": [
        { "name": "composite", "class": "value" },
        { "name": "selector", "class": "value" },
        { "name": "replacement", "class": "value" }
      ]
    },
    {
      "name": "Fill",
      "class": "value",
      "ops": [
        { "name": "type", "class": "type" },
        { "name": "value", "class": "value" }
      ]
    },
    {
      "name": "Undef",
      "class": "value",
      "ops": [
        { "name": "type", "class": "type" }
      ]
    },
    {
      "name": "FnAddr",
      "class": "value",
      "description": "Obtains a function pointer from a function",
      "ops": [
        { "name": "fn", "class": "function" }
      ]
    },
    {
      "name": "BuiltinRef",
      "class": "value",
      "description": "Provides a reference to a given builtin",
      "ops": [
        { "name": "builtin", "type": "Builtin" }
      ]
    },
    {
      "name": "SizeOf",
      "class": "value",
      "description": "Provides the size in bytes of a data type",
      "ops": [
        { "name": "type", "class": "type" }
      ]
    },
    {
      "name": "AlignOf",
      "class": "value",
      "description": "Provides the alignment in bytes of a data type",
      "ops": [
        { "name": "type", "class": "type" }
      ]
    },
    {
      "name": "OffsetOf",
      "class": "value",
      "description": "Provides the byte offset of a field in a record type",
      "ops": [
        { "name": "type", "class": "type" },
        { "name": "idx", "class": "value" }
      ]
    },
    {
      "name": "ScopeCast",
      "class": ["value", "instruction"],
      "description": "Changes the qualified scope of a value",
      "ops": [
        { "name": "scope", "type": "ShdScope" },
        { "name": "src", "class": "value" }
      ]
    },
    {
      "name": "BitCast",
      "class": ["value", "instruction"],
      "description": "Reinterprets the bit-pattern of a value into a different type",
      "ops": [
        { "name": "type", "class": "type" },
        { "name": "src", "class": "value" }
      ]
    },
    {
      "name": "GenericPtrCast",
      "class": ["value", "instruction"],
      "description": "Promotes a pointer into the generic address space",
      "ops": [
        { "name": "src", "class": "value" }
      ]
    },
    {
      "name": "Conversion",
      "class": ["value", "instruction"],
      "description": "Converts things into other things.",
      "ops": [
        { "name": "type", "class": "type" },
        { "name": "src", "class": "value" }
      ]
    },
    {
      "name": "IndirectCall",
      "class": ["instruction", "value", "mem"],
      "ops": [
        { "name": "mem", "class": "mem" },
        { "name": "callee", "class": "value" },
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "Call",
      "class": ["instruction", "value", "mem"],
      "ops": [
        { "name": "mem", "class": "mem" },
        { "name": "callee", "class": "function" },
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "MemAndValue",
      "class": ["value", "mem"],
      "description": "Associate a value with a mem object, this allows adding side effects to a value",
      "ops": [
        { "name": "mem", "class": "mem" },
        { "name": "value", "class": "value" }
      ]
    },
    {
      "name": "If",
      "snake_name": "if_instr",
      "class": ["terminator", "structured_construct"],
      "ops": [
        { "name": "mem", "class": "mem" },
        { "name": "yield_types", "class": "type", "list": true },
        { "name": "condition", "class": "value" },
        { "name": "if_true", "class": "basic_block" },
        { "name": "if_false", "class": "basic_block", "nullable": true },
        { "name": "tail", "class": "basic_block" }
      ]
    },
    {
      "name": "Match",
      "snake_name": "match_instr",
      "class": ["terminator", "structured_construct"],
      "ops": [
        { "name": "mem", "class": "mem" },
        { "name": "yield_types", "class": "type", "list": true },
        { "name": "inspect", "class": "value" },
        { "name": "literals", "class": "value", "list": true },
        { "name": "cases", "class": "basic_block", "list": true },
        { "name": "default_case", "class": "basic_block" },
        { "name": "tail", "class": "basic_block" }
      ]
    },
    {
      "name": "Loop",
      "snake_name": "loop_instr",
      "class": ["terminator", "structured_construct"],
      "ops": [
        { "name": "mem", "class": "mem" },
        { "name": "yield_types", "class": "type", "list": true },
        { "name": "body", "class": "basic_block" },
        { "name": "initial_args", "class": "value", "list": true },
        { "name": "tail", "class": "basic_block" }
      ]
    },
    {
      "name": "Control",
      "class": ["terminator", "structured_construct"],
      "ops": [
        { "name": "mem", "class": "mem" },
        { "name": "yield_types", "class": "type", "list": true },
        { "name": "inside", "class": "basic_block" },
        { "name": "tail", "class": "basic_block" }
      ]
    },
    {
      "name": "Comment",
      "class": ["instruction", "mem"],
      "ops": [
        { "name": "mem", "class": "mem" },
        { "name": "string", "class": "string" }
      ]
    },
    {
      "name": "IndirectTailCall",
      "class": "terminator",
      "ops": [
        { "name": "mem", "class": "mem" },
        { "name": "callee", "class": "value" },
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "Jump",
      "class": ["terminator", "jump"],
      "ops": [
        { "name": "mem", "class": "mem" },
        { "name": "target", "class": "basic_block" },
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "Branch",
      "class": "terminator",
      "description": [
        "Branches can cause divergence, but they can never cause re-convergence.",
        "Branch alternatives are made out of Jump terminators"
      ],
      "ops": [
        { "name": "mem", "class": "mem" },
        { "name": "condition", "class": "value" },
        { "name": "true_jump", "class": "jump" },
        { "name": "false_jump", "class": "jump" }
      ]
    },
    {
      "name": "Switch",
      "snake_name": "br_switch",
      "class": "terminator",
      "description": "N-way variant of Branch. See Branch.",
      "ops": [
        { "name": "mem", "class": "mem" },
        { "name": "switch_value", "class": "value" },
        { "name": "case_values", "class": "value", "list": true },
        { "name": "case_jumps", "class": "jump", "list": true },
        { "name": "default_jump", "class": "jump" }
      ]
    },
    {
      "name": "Join",
      "class": "terminator",
      "description": [
        "Join nodes are used to undo the divergence caused by branches",
        "At join nodes, an explicit mask is used to force a number of divergent execution paths to resume.",
        "If @p is_indirect is set, the target must be a function pointer. Otherwise, the target must be a function directly."
      ],
      "ops": [
        { "name": "mem", "class": "mem" },
        { "name": "join_point", "class": "value" },
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "MergeContinue",
      "class": "terminator",
      "ops": [
        { "name": "mem", "class": "mem" },
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "MergeBreak",
      "class": "terminator",
      "ops": [
        { "name": "mem", "class": "mem" },
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "MergeSelection",
      "class": "terminator",
      "ops": [
        { "name": "mem", "class": "mem" },
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "Return",
      "snake_name": "fn_ret",
      "class": "terminator",
      "ops": [
        { "name": "mem", "class": "mem" },
        { "name": "args", "class": "value", "list": true }
      ]
    },
    {
      "name": "Unreachable",
      "class": "terminator",
      "ops": [
        { "name": "mem", "class": "mem" }
      ]
    },
    {
      "name": "Function",
      "snake_name": "fun",
      "class": ["abstraction", "function"],
      "recursive": true,
      "nominal": true,
      "ops": [
        { "name": "params", "class": "param", "list": true },
        { "name": "return_types", "class": "type", "list": true },
        { "name": "body", "class": "terminator", "nullable": true, "tail": true }
      ]
    },
    {
      "name": "Constant",
      "class": ["value"],
      "recursive": true,
      "description": "Constants are used to express possibly complicated compile-time expressions",
      "nominal": true,
      "ops": [
        { "name": "type_hint", "class": "type" },
        { "name": "value", "class": "value", "nullable": true, "tail": true }
      ]
    },
    {
      "name": "GlobalVariable",
      "class": ["value"],
      "recursive": true,
      "nominal": true,
      "ops": [
        { "name": "type", "class": "type" },
        { "name": "address_space", "type": "AddressSpace" },
        { "name": "is_ref", "type": "bool" },
        { "name": "init", "class": "value", "nullable": true, "tail": true }
      ]
    },
    {
      "name": "NominalType",
      "snake_name": "nom_type",
      "class": ["type"],
      "recursive": true,
      "nominal": true,
      "type": false,
      "ops": [
        { "name": "body", "class": "type", "nullable": true, "tail": true }
      ]
    },
    {
      "name": "Annotation",
      "class": "annotation",
      "type": false,
      "ops": [
        { "name": "name", "class": "string" }
      ]
    },
    {
      "name": "AnnotationId",
      "class": "annotation",
      "type": false,
      "ops": [
        { "name": "name", "class": "string" },
        { "name": "id", "class": "none" }
      ]
    },
    {
      "name": "AnnotationValue",
      "class": "annotation",
      "type": false,
      "ops": [
        { "name": "name", "class": "string" },
        { "name": "value", "class": "value" }
      ]
    },
    {
      "name": "AnnotationValues",
      "class": "annotation",
      "type": false,
      "ops": [
        { "name": "name", "class": "string" },
        { "name": "values", "class": "value", "list": true }
      ]
    },
    {
      "name": "BasicBlock",
      "recursive": true,
      "description": "A named abstraction that lives inside a function and can be jumped to",
      "class": ["abstraction", "basic_block"],
      "nominal": true,
      "ops": [
        { "name": "params", "class": "param", "list": true },
        { "name": "body", "class": "terminator", "nullable": true, "tail": true },
        { "name": "insert", "type": "BodyBuilder*", "ignore": true }
      ]
    },
    {
      "name": "AbsMem",
      "class": "mem",
      "type": false,
      "ops": [
        { "name": "abs", "class": "abstraction" }
      ]
    },
    {
      "name": "ExtValue",
      "description": "Unknown value-producing operation without side effects",
      "class": "value",
      "ops": [
        { "name": "result_t", "class": "type" },
        { "name": "set", "class": "string" },
        { "name": "opcode", "type": "uint32_t" },
        { "name": "operands", "class": "value", "list": true }
      ]
    },
    {
      "name": "ExtInstr",
      "description": "Unknown instruction with side effects",
      "class": ["mem", "value", "instruction"],
      "ops": [
        { "name": "mem", "class": "mem", "nullable": true },
        { "name": "result_t", "class": "type", "nullable": true },
        { "name": "set", "class": "string" },
        { "name": "opcode", "type": "uint32_t" },
        { "name": "operands", "class": "value", "list": true }
      ]
    },
    {
      "name": "ExtTerminator",
      "description": "Unknown instruction with side effects",
      "class": "terminator",
      "ops": [
        { "name": "mem", "class": "mem", "nullable": true },
        { "name": "set", "class": "string" },
        { "name": "opcode", "type": "uint32_t" },
        { "name": "operands", "class": "value", "list": true }
      ]
    },
    {
      "name": "ExtType",
      "type": false,
      "class": "type",
      "ops": [
        { "name": "set", "class": "string" },
        { "name": "opcode", "type": "uint32_t" },
        { "name": "operands", "class": "none", "list": true }
      ]
    }
  ]
}