# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: ubuntu-latest
            c_compiler: cl
          - os: windows-latest # these don't use MinGW, what's the point ?!
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'

    - uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    #- name: Install SPIRV-Headers
    #  run: |
    #    git clone https://github.com/KhronosGroup/SPIRV-Headers
    #    mkdir SPIRV-Headers/build
    #    cmake -B SPIRV-Headers/build -S SPIRV-Headers
    #    mkdir SPIRV-Headers/install
    #    cmake --install SPIRV-Headers/build --prefix SPIRV-Headers/install

    - name: Install Clang & LLVM (setup-clang)
      uses: egor-tensin/setup-clang@v1.4

    #- name: Install LLVM (winlibs)
    #  if: startsWith(matrix.os,'windows')
    #  uses: bwoodsend/setup-winlibs-action@v1
    #  with:
    #    with_clang: true

    - name: Install json-c (apt)
      if: startsWith(matrix.os,'ubuntu')
      run: |
        sudo apt install libjson-c-dev

    - name: Install Vulkan (apt)
      if: startsWith(matrix.os,'ubuntu')
      run: |
        sudo apt install libvulkan-dev mesa-vulkan-drivers vulkan-tools

    - name: ccache
      if: startsWith(matrix.os,'ubuntu')
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ github.job }}-${{ matrix.os }}  # Eg. "some_build-ubuntu-latest"

    - name: Enable ccache (linux)
      if: startsWith(matrix.os,'ubuntu')
      run: |
        echo "CMAKE_PLATFORM_SPECIFIC_ARGS=-D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache" >> $GITHUB_ENV

    - name: Install Vulkan SDK (windows)
      if: startsWith(matrix.os,'windows')
      uses: jakoch/install-vulkan-sdk-action@v1
      with:
        install_runtime: true
        cache: true
        install_lavapipe: true

    - name: Add Vulkan SDK runtime path (windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        echo "Current PATH:${{ env.GITHUB_PATH }}"
        echo "${{ env.VULKAN_SDK }}\runtime\x64\" >> $env:GITHUB_PATH

    #- name: Enable ASAN (linux)
    #  if: startsWith(matrix.os,'ubuntu')
    #  run: |
    #    echo "CMAKE_PLATFORM_SPECIFIC_ARGS=-DCMAKE_C_FLAGS=-fsanitize=address" >> $GITHUB_ENV
    #    echo "CMAKE_PLATFORM_SPECIFIC_ARGS=-DCMAKE_CXX_FLAGS=-fsanitize=address" >> $GITHUB_ENV

    #- name: Force LLVM18 (ubuntu)
    #  if: startsWith(matrix.os,'ubuntu')
    #  run: |
    #    echo "CMAKE_PLATFORM_SPECIFIC_ARGS=${{ env.CMAKE_PLATFORM_SPECIFIC_ARGS }} -DLLVM_DIR=/usr/lib/llvm-18/cmake" >> $GITHUB_ENV

    - name: Force Lavapipe (windows)
      if: startsWith(matrix.os, 'windows')
      run: |
        echo "Current PATH:${{ env.GITHUB_PATH }}"
        echo "VK_DRIVER_FILES=C:\Lavapipe\share\vulkan\icd.d\lvp_icd.x86_64.json" >> $env:GITHUB_ENV
        echo "VK_LOADER_DEBUG=all" >> $env:GITHUB_ENV
        ls C:\lavapipe
        gci -r -Path C:\Lavapipe

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DSPIRV-Headers_DIR=SPIRV-Headers/install/share/cmake/SPIRV-Headers
        ${{ env.CMAKE_PLATFORM_SPECIFIC_ARGS }}
        -S ${{ github.workspace }}
        
    - name: Disable runner tests (Windows)
      if: startsWith(matrix.os, 'windows')
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DSHADY_TEST_RUNNER_RUN_TESTS=OFF
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure
